<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

	<description>Spring公共配置</description>
	<aop:aspectj-autoproxy />
	<!-- 线程执行器配置，用于任务注册 -->
	
	    <!-- 将多个配置文件读取到容器中，交给Spring管理 -->  
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">  
        <property name="locations">  
           <list>  
              <!-- 这里支持多种寻址方式：classpath和file -->  
              <value>classpath:config/conf.properties</value>
            </list>  
        </property>  
    </bean> 
    
    <bean id="jsonMapper" class="org.codehaus.jackson.map.ObjectMapper"/>
    
    <context:annotation-config />
	<context:component-scan base-package="com.md.search">
	</context:component-scan>
    
    	
	<bean name="PropertyPlaceholderConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="properties" ref="appConfiguration" />
	</bean>

	<bean id="appConfiguration" class="com.md.search.server.init.ConfigBean">
		<property name="configurations">
			<list>
				<bean class="org.apache.commons.configuration.XMLConfiguration">
					<constructor-arg index="0" type="java.net.URL"
						value="classpath:dev.app.config.xml" />
				</bean>
			</list>			
		</property>
		
	</bean>
    
    <bean
		id="cronExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property
			name="corePoolSize"
			value="10" />
		<property
			name="maxPoolSize"
			value="20" />
		<property
			name="queueCapacity"
			value="20" />
	</bean>
	
	<bean
		id="updownEsServer"
		class="com.md.search.server.service.UpdownEsServer"/>

	<!-- 调度业务 -->
	<bean
		id="updownJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property
			name="targetObject"
			ref="updownEsServer" />
		<property
			name="targetMethod"
			value="updateUpdownTask" />
	</bean>



	<bean
		id="updateUpdownTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property
			name="jobDetail"
			ref="updownJobDetail" />
		<property
			name="startDelay"
			value="10000" />
		<property
			name="repeatInterval"
			value="300000" />
	</bean>
	
	
	
		<bean
		id="merchantService"
		class="com.md.search.server.service.MerchantService"/>

	<!-- 调度业务 -->
	<bean
		id="merchantJobDetail"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property
			name="targetObject"
			ref="merchantService" />
		<property
			name="targetMethod"
			value="updataTask" />
	</bean>



	<bean
		id="updateMerchantTrigger"
		class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property
			name="jobDetail"
			ref="merchantJobDetail" />
		<property
			name="startDelay"
			value="15000" />
		<property
			name="repeatInterval"
			value="600000" />
	</bean>

	<!-- 设置调度 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
				<ref bean="updateUpdownTrigger" />
				<ref bean="updateMerchantTrigger" />
			</list>
		</property>
		<property
			name="taskExecutor"
			ref="cronExecutor" />
	</bean>
	
	<!-- MyBatis配置 -->
    <bean
		id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property
			name="dataSource"
			ref="dataSource" />
		<property
			name="typeAliasesPackage"
			value="com.md.search.server.bean" />
		<property
			name="mapperLocations"
			value="classpath:mybatis/*Mapper.xml" />
	</bean>

	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property
			name="basePackage"
			value="com.md.search.server.dao" />
		<property
			name="annotationClass"
			value="com.md.search.server.dao.MyBatisRepository" />
		<property
			name="sqlSessionFactoryBeanName"
			value="sqlSessionFactory" />
	</bean>

	<!-- 事务管理器配置, 单数据源事务 -->
	<bean
		id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<tx:annotation-driven
		transaction-manager="transactionManager"
		proxy-target-class="true" />

 	<bean
		id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property
			name="url"
			value="${db.url}"/>
		<property
			name="username"
			value="${db.user}" />
		<property
			name="password"
			value="${db.pwd}" />

		<property
			name="filters"
			value="stat" />

		<property
			name="maxActive"
			value="20" />
		<property
			name="initialSize"
			value="1" />
		<property
			name="maxWait"
			value="60000" />
		<property
			name="minIdle"
			value="1" />

		<property
			name="timeBetweenEvictionRunsMillis"
			value="60000" />
		<property
			name="minEvictableIdleTimeMillis"
			value="300000" />

		<property
			name="validationQuery"
			value="SELECT 'x'" />
		<property
			name="testWhileIdle"
			value="true" />
		<property
			name="testOnBorrow"
			value="false" />
		<property
			name="testOnReturn"
			value="false" />
		<property
			name="poolPreparedStatements"
			value="true" />
		<property
			name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />
	</bean>
	
	
    <bean class="com.md.search.server.factory.ElasticSearchClientFactory">
        <property name="typology" value="${es.type}" />
        <property name="nodes" value="${es.nodes}"/>
        <property name="clusName" value="${es.cluster.name}"/>
    </bean>
    
</beans>